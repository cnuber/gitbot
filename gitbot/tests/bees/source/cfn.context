{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Create a spot-priced AutoScaling group and a Bees With Machine Guns controller; execute the load test against the AutoScaling group and store the results in S3. Run /home/ec2-user/run-bees to execute load tests manually.",
    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "String"
        },
        "BeesControllerInstanceType": {
            "Description": "Type of EC2 instance to launch",
            "Type": "String",
            "Default": "c1.medium",
            "AllowedValues": {{ instances|json|indent(12) }},
            "ConstraintDescription": "Must be a valid EC2 instance type."
        },
        "TotalConnections": {
            "Description": "Total connections per load tester",
            "Type": "Number",
            "Default": "200000"
        },
        "SpotPrice": {
            "Description": "Spot price for application AutoScaling Group",
            "Type": "Number",
            "MinValue" : "0"
        },
        "ConcurrentConnections": {
            "Description": "Number of concurrent requests per load tester",
            "Type": "Number",
            "Default": "1000"
        },
        "BeeCount": {
            "Description": "Number of EC2 instances to launch as the load generators (bees)",
            "Type": "Number",
            "Default": "2"
        },
        "AppInstanceType": {
            "Description": "Type of EC2 instant for application AutoScaling Group",
            "Type": "String",
            "Default": "c1.medium",
            "AllowedValues": {{ instances|json|indent(12) }},
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "AppInstanceCountMin": {
            "Description": "Minimum number of EC2 instances to launch for application AutoScaling Group",
            "Type": "Number",
            "Default": "2"
        },
        "AppInstanceCountMax": {
            "Description": "Maximum number of EC2 instances to launch for application AutoScaling Group",
            "Type": "Number",
            "Default": "2"
        },
        "AppInstanceCountDesired": {
            "Description": "Desired number of EC2 instances to launch for application AutoScaling Group",
            "Type": "Number",
            "Default": "2"
        },
        "RunTests": {
            "Description": "Enter 'true' to run tests immediately. WARNING: CreateStack will not finish until test executes if this is set to 'true'",
            "Type": "String",
            "Default": "true",
            "AllowedValues": [ "true", "false" ],
            "ConstraintDescription": "Must be 'true' or 'false'."
        }
    },
    "Mappings": {
        "AWSRegionPlatform2AMI": {{ amimap|json|indent(8) }}
    },
    "Resources": {
        "CfnUser": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "cloudformation:DescribeStackResource",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "elasticloadbalancing:DescribeInstanceHealth",
                                    "Resource": "*"
                                },
                                {
                                    "Effect" : "Allow",
                                    "Action" : "ec2:*",
                                    "Resource" : "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "CfnKeys": {
            "Type": "AWS::IAM::AccessKey",
            "Properties": {
                "UserName": {
                    "Ref": "CfnUser"
                }
            }
        },
        "ResultBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "Private"
            },
            "DeletionPolicy" : "Retain"
        },

        "BucketPolicy" : {
            "Type" : "AWS::S3::BucketPolicy",
            "Properties" : {
                "PolicyDocument": {
                    "Version"      : "2008-10-17",
                    "Id"           : "MyPolicy",
                    "Statement"    : [{
                        "Sid"        : "AllAccess",
                        "Action"     : ["s3:*"],
                        "Effect"     : "Allow",
                        "Resource"   : {"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "ResultBucket" }, "/*"]]},
                        "Principal"  : { "AWS": {"Fn::GetAtt" : ["CfnUser", "Arn"]} }
                    }]
                },
                "Bucket" : {"Ref": "ResultBucket" }
            }
        },
        "BeeController": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "AppGroup",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "packages": {
                            "yum": {
                                "gcc": [],
                                "gcc-c++": [],
                                "make": [],
                                "openssl-devel": [],
                                "httpd": [],
                                "python-paramiko": [],
                                "gmp-devel" : [],
                                "python26-devel" : []
                            },
                            "python" : {
                                "beeswithmachineguns" : []
                            }
                        },
                        "files": {
                            "/home/ec2-user/create-keypair" : {
                                "content" : {{ contents('create-keypair')|indent(32) }},
                                "mode" : "000750",
                                "owner" : "ec2-user",
                                "group" : "ec2-user"
                            },
                            "/home/ec2-user/delete-keypair" : {
                                "content" : {{ contents('delete-keypair')|indent(32) }},
                                "mode" : "000750",
                                "owner" : "ec2-user",
                                "group" : "ec2-user"
                            },
                            "/home/ec2-user/create-swarm": {
                                "content": {{  contents('create-swarm')|indent(32) }},
                                "mode": "000755",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            },
                            "/home/ec2-user/start-swarm": {
                                "content": {{  contents('start-swarm')|indent(32) }},
                                "mode": "000755",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            },
                            "/home/ec2-user/kill-swarm": {
                                "content": {{  contents('kill-swarm')|indent(32) }},
                                "mode": "000755",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            },
                            "/home/ec2-user/.boto": {
                                "content": {{  contents('.boto')|indent(32) }},
                                "mode": "000600",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            },
                            "/home/ec2-user/run-bees": {
                                "content": {{  contents('run-bees')|indent(32) }},
                                "mode": "000755",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            },
                            "/home/ec2-user/wait-for-elb" : {
                                "content": {{  contents('wait-for-elb')|indent(32) }},
                                "mode" : "000750",
                                "owner" : "ec2-user",
                                "group" : "ec2-user"
                            },
                            "/home/ec2-user/tools/aws" : {
                                "source" : "https://raw.github.com/timkay/aws/master/aws",
                                "mode" : "000755",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            },
                            "/home/ec2-user/.awssecret" : {
                                "content" : {"Fn::Join": ["", [{"Ref": "CfnKeys" }, "\n",
                                                                 {"Fn::GetAtt": ["CfnKeys", "SecretAccessKey"] }]] },
                                "mode" : "000600",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            },
                            "/root/.awssecret" : {
                                "content" : {"Fn::Join": ["", [{"Ref": "CfnKeys" }, "\n",
                                                                 {"Fn::GetAtt": ["CfnKeys", "SecretAccessKey"] }]] },
                                "mode" : "000600",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands" : {
                            "00install_aws" : {
                                "command" : ["perl", "/home/ec2-user/tools/aws", "--install"]
                            },
                            "01run_bees" : {
                                "command" : ["su", "ec2-user", "-c", "./run-bees"],
                                "cwd" : "/home/ec2-user",
                                "test" : ["test", "true", "=", {"Ref": "RunTests" }]
                            }
                        }

                    }
                }
            },
            "Properties": {
                "SecurityGroups": [ {"Ref": "ControllerSecurityGroup" } ],
                "KeyName": {"Ref": "KeyName" },
                "ImageId": {"Fn::FindInMap": [ "AWSRegionPlatform2AMI", {"Ref": "AWS::Region" }, "amzn"]},
                "InstanceType": {"Ref": "BeesControllerInstanceType" },
                "Tags": [ { "Key": "Name", "Value": "bees-controller" } ],
                "UserData": {
                    "Fn::Base64": {{ contents('controller-user-data')|indent(20) }}
                }
            }
        },
        "ElasticLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "AvailabilityZones": {"Fn::GetAZs" : "" } ,
                "Listeners": [ { "LoadBalancerPort": "80",
                                 "InstancePort": "80",
                                 "Protocol": "HTTP",
                                 "InstanceProtocol": "HTTP" } ],
                "HealthCheck": {
                    "Target": "HTTP:80/",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "10",
                    "Interval": "30",
                    "Timeout": "5"
                }
            }
        },
        "AppGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": {"Fn::GetAZs" : "" },
                "LaunchConfigurationName": {"Ref": "LaunchConfig" },
                "MinSize": {"Ref": "AppInstanceCountMin" },
                "MaxSize": {"Ref": "AppInstanceCountMax" },
                "DesiredCapacity": {  "Ref": "AppInstanceCountDesired" },
                "LoadBalancerNames": [ {"Ref": "ElasticLoadBalancer" } ]
            }
        },
        "LaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "packages" : {
                            "yum" : {
                                "nginx" : []
                            }
                        },
                        "services" : {
                            "sysvinit" : {
                                "nginx" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "packages" : {
                                        "yum" : ["nginx"]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "SpotPrice" : {"Ref": "SpotPrice" },
                "ImageId": {"Fn::FindInMap": [ "AWSRegionPlatform2AMI", {"Ref": "AWS::Region" }, "amzn"]},
                "UserData": {
                    "Fn::Base64": {{ contents('app-user-data')|indent(20) }}
                },
                "SecurityGroups": [ {"Ref": "AppSecurityGroup" } ],
                "InstanceType": {"Ref": "AppInstanceType" },
                "KeyName": {  "Ref": "KeyName"  }
            }
        },
        "ControllerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable SSH access",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "BeeSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable SSH access and HTTP access on the inbound port",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "SourceSecurityGroupName" : {"Ref": "ControllerSecurityGroup" }
                    }
                ]
            }
        },
        "AppSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable tcp access on the inbound port for ELB and SSH from outside",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "SourceSecurityGroupOwnerId" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.OwnerAlias"]},
                        "SourceSecurityGroupName" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.GroupName"]}
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    }]
            }
        },

        "ControllerHandle" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },

        "ControllerCondition" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "BeeController",
            "Properties" : {
                "Handle" : {"Ref": "ControllerHandle" },
                "Timeout" : "900"
            }
        }
    },
    "Outputs": {
        "WebsiteURL": {
            "Description": "URL of website under test",
            "Value": {"Fn::Join": ["", ["http://", {"Fn::GetAtt": ["ElasticLoadBalancer", "DNSName"] }]]}
        },
        "BeeControllerAddress": {
            "Description": "Public address of the bees controller",
            "Value": {  "Fn::GetAtt": [ "BeeController", "PublicDnsName" ] }
        },
        "TestResultsURL": {
            "Value": {"Fn::Join": [ "", ["https://", {"Fn::GetAtt": [ "ResultBucket", "DomainName" ] }, "/swarm-results.tar.gz" ]]},
            "Description": "URL of Results file"
        }
    }
}